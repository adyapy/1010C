//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PieceStateListenerComponent pieceStateListener { get { return (PieceStateListenerComponent)GetComponent(GameComponentsLookup.PieceStateListener); } }
    public bool hasPieceStateListener { get { return HasComponent(GameComponentsLookup.PieceStateListener); } }

    public void AddPieceStateListener(System.Collections.Generic.List<IPieceStateListener> newValue) {
        var index = GameComponentsLookup.PieceStateListener;
        var component = (PieceStateListenerComponent)CreateComponent(index, typeof(PieceStateListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePieceStateListener(System.Collections.Generic.List<IPieceStateListener> newValue) {
        var index = GameComponentsLookup.PieceStateListener;
        var component = (PieceStateListenerComponent)CreateComponent(index, typeof(PieceStateListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePieceStateListener() {
        RemoveComponent(GameComponentsLookup.PieceStateListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPieceStateListener;

    public static Entitas.IMatcher<GameEntity> PieceStateListener {
        get {
            if (_matcherPieceStateListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PieceStateListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPieceStateListener = matcher;
            }

            return _matcherPieceStateListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddPieceStateListener(IPieceStateListener value) {
        var listeners = hasPieceStateListener
            ? pieceStateListener.value
            : new System.Collections.Generic.List<IPieceStateListener>();
        listeners.Add(value);
        ReplacePieceStateListener(listeners);
    }

    public void RemovePieceStateListener(IPieceStateListener value, bool removeComponentWhenEmpty = true) {
        var listeners = pieceStateListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemovePieceStateListener();
        } else {
            ReplacePieceStateListener(listeners);
        }
    }
}
